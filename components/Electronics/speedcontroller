#  This code will do make a very simple estimation of the required electronic speed controllers (ESC)
#  mass and dimensions, based on the motor's ESC reccomendation in Amps.

from parapy.core import *
from parapy.geom import *
from definitions import *
from directories import *
import matplotlib.pyplot as plt
from scipy import stats


class SpeedController(Component):


    amp_recc = Input(40)      #  This is the reccomended ESC amperage from the chosen motor.
    #  TODO connect this input to the current motor choice and corresponding amp draw.

    amp_range =      [6,      20,    30,     40,    60,   100,   120]
    #  These are amp rating for ESCs found on hobbyking, covering our spectrum of motor options in the database.
    weight_range =  [0.006, 0.017, 0.021, 0.036, 0.063, 0.081, 0.164]
    #  These are the corresponding weights of the ESC's found on hobbyking
    volume_range =  [1728,  7560,   7560, 15444, 19200, 22400, 43428]
    #  Above is the volume of the ESC's in cubic mm

    @Attribute
    def esc_weight_plot(self):
        fig = plt.figure('ESC_Weight_vs_Amperage')
        plt.style.use('ggplot')
        plt.title('ESC Weight vs. Continuous Amperage')
        plt.plot(self.amp_range, self.weight_range, 'b', label='ESC Weight')
        plt.ylabel('Weight')
        plt.xlabel('Amperage')
        plt.legend(loc=0)
        #plt.ion()
        plt.show()
        fig.savefig(fname=os.path.join(DIRS['USER_DIR'], 'plots', '%s.pdf' % fig.get_label()), format='pdf')
        return 'Plot Made, See PyCharm'

    @Attribute
    def esc_size_plot(self):
        fig = plt.figure('ESC_Volume_vs_Amperage')
        plt.style.use('ggplot')
        plt.title('ESC Volume vs. Continuous Amperage')
        plt.plot(self.amp_range, self.volume_range, 'b', label='ESC Volume')
        plt.ylabel(r'Volume [$\mathrm{m}^3$]')
        plt.xlabel(r'Amperage [$\mathrm{A}$]')
        plt.legend(loc=0)
        #plt.ion()      #
        plt.show()
        fig.savefig(fname=os.path.join(DIRS['USER_DIR'], 'plots', '%s.pdf' % fig.get_label()), format='pdf')
        return 'Plot Made, See PyCharm'



    @Attribute
    def esc_weight(self):
        #  This attr estimates the esc weight from the linear regression of the found ESC amperages and corresponding weights.
        gradientt, interceptt, r_valuee, p_valuee, std_errr = stats.linregress(self.amp_range, self.weight_range)
        print "Gradient and intercept", gradientt, interceptt
        print "R-squared", r_valuee ** 2
        esc_weight = self.amp_recc*gradientt + interceptt

        if esc_weight <0:
            #  This returns the minimum found ESC weight if a low required amperage is input and the linear regression returns a negative weight.
            esc_weight = self.weight_range[0]

        return esc_weight


    @Attribute
    def esc_size(self):
        #  This attr estimates the esc weight from the linear regression of the found ESC amperages and corresponding weights.
        gradient, intercept, r_value, p_value, std_err = stats.linregress(self.amp_range, self.volume_range)
        print "Gradient and intercept", gradient, intercept
        print "R-squared", r_value ** 2
        esc_size = self.amp_recc * gradient + intercept

        if esc_size < 0:
            #  This returns the minimum found ESC weight if a low required amperage is input and the linear regression returns a negative weight.
            esc_size = self.volume_range[0]

        return esc_size

        return





if __name__ == '__main__':
    from parapy.gui import display
    obj = SpeedController()
    display(obj)